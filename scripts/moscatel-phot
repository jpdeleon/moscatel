#!/usr/bin/env python

import os
from glob import glob
import argparse
import getpass
import sys
import ast

from moscatel.utils import *
from moscatel.phot import * #make_lightcurve
from moscatel.plot import *

try:
    from astropy.io import fits as pf
except:
    import pyfits as pf
import numpy as np
from matplotlib import pyplot as plt
import pandas as pd
from tqdm import tqdm
#import multiprocessing


parser = argparse.ArgumentParser(description=
	"""Basic pipeline:\n
    1. Reads photometry configuration defined in config.txt
    2. Given `box_size`, crop 3 (default) brightest point sources
    per raw image frame
    3. Recalculate centroid of the cropped image
    4. Do photometry given aperture radius `r`
    5. Plot lightcurves""",
    usage='use "%(prog)s --help" for more information',
    formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--band_idx', help='0: g-band, 1: r-band, 2: z-band, (3: i-band)', type=int, choices=(0,1,2), required=True)
parser.add_argument('--box_size', help='size of crop box (in pixels) centered on point source; default=80 pix', type=int, default=100)
parser.add_argument('--r',help='size (in pixels) of aperture radius for photometry', type=int)
parser.add_argument('--showfig', help='show raw lightcurve after aperture photometry?', type=bool, default=False)
args = parser.parse_args()

band_idx = args.band_idx
box_size = args.box_size
showfig = args.showfig

print('\n-----------------------')
print('Retrieving output of moscatel-init')
print('-----------------------\n')
config=check_config()
data_dir = config[0]
input_dir = config[1]
filters_in_config = config[2].split(',')
centroids = config[3]
if args.r is not None:
    aperture_radius = args.r
else:
    aperture_radius = config[4]
    #convert string to int or tuple
    #aperture_radius = ast.literal_eval(aperture_radius)

input_files = glob(os.path.join(input_dir,'*.txt'))

bands={}
if input_files != []:
    for i in input_files:
        b=i.split('/')[-1].split('-')[0]
        bands[b]=np.loadtxt(i,dtype=str)
else:
    print('ERROR: no input files in {}\n'.format(input_dir))
    print('Have you run `moscatel-init`?\n')
    sys.exit()

print('\n-----------------------')
print('Generating lightcurves')
print('-----------------------\n')

if aperture_radius !=config[4]: #if not default value in config.txt
    print('\nUsing aperture radii: {} pixels\n'.format(aperture_radius))
else:
    print('\nUsing default aperture radius: {} pixels\n'.format(aperture_radius))

#consider only one aperture
if type(aperture_radius) is not tuple:
    for i in aperture_radius:
        dfs, band_idx, band_names =  make_lightcurve(centroids, bands, band_idx,
                                        box_size, aperture_radius)
        df = plot_lightcurve(dfs, band_idx, band_names, aperture_radius)

#do photometry per aperture radius
else:
    dfs, band_idx, band_names =  make_lightcurve2(centroids, bands, band_idx,
                                    box_size, aperture_radius)
    df = plot_lightcurve2(dfs, band_idx, band_names, i)


print('\n-----------------------')
print('Data saved in {}'.format(filename))
print('-----------------------\n')


'''
See `analysis` for basic lightcurve analysis.
'''
print('-----------------------')
print('          DONE')
print('-----------------------\n')
