#!/usr/bin/env python

import argparse
import pandas as pd
import sys
import os
import numpy as np
import getpass
from moscatel.plot import df_phot, plot_matrix, plot_params, plot_multicolor, df_phot_multicolor, df_phot_multicolor2

parser = argparse.ArgumentParser(description="Do differential photometry by dividing flux of target star by that of the ref star given the star ids (e.g. target=a,ref=b) and show lightcurve",usage='use "%(prog)s --help" for more information', formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--target', help='target star id', type=str, choices=('a','b','c'))
parser.add_argument('--ref', help='reference star id', type=str, choices=('a','b','c'))
parser.add_argument('--band', help='choose band', type=str, default='all', choices=('g','r','z', 'all'))
#parser.add_argument('--star', help='choose star', type=int, default=None, choices=(0,1,2))
parser.add_argument('--normed', help='normalize lightcurve?', type=bool, default=True, choices=(True, False))
parser.add_argument('--show_raw_lc', help='show raw lightcurve?', type=bool, default=False, choices=(True, False))
parser.add_argument('--clip', help='clip datapoints (leading,trailing)', type=str, default=None)
parser.add_argument('--clip_sigma', help='keep only the ones that are within +- sigma', type=float, default=None)

args = parser.parse_args()

target = args.target
ref = args.ref
normed = args.normed
band = args.band
#star = args.star
show_raw_lc = args.show_raw_lc
clip = args.clip
clip_sigma=args.clip_sigma

#parse tuple separated by comma
if clip is not None:
    clip = [int(i) for i in clip.split(',')]

##load output of `moscatel` in output/*.csv
username = getpass.getuser()
output_dir = os.path.join('/home',username,'moscatel_output')


if not os.path.exists(output_dir):
    print('\nERROR: check missing output file of `moscatel-phot` in : {}\n'.format(output_dir))
    sys.exit()

if band=='r':
    try:
         df_r = pd.read_csv(output_dir+'/rband.csv', index_col=0, parse_dates=True)
    except:
        print('\NOTE: check missing r-band data in {}'.format(output_dir))
elif band =='g':
    try:
        df_g = pd.read_csv(output_dir+'/gband.csv', index_col=0, parse_dates=True)
    except:
        print('\NOTE: check missing g-band data in {}'.format(output_dir))
elif band=='z':
    try:
        df_z = pd.read_csv(output_dir+'/zband.csv', index_col=0, parse_dates=True)
    except:
        print('\NOTE: check missing z-band data in {}'.format(output_dir))
else:
    try:
        df_r = pd.read_csv(output_dir+'/rband.csv', index_col=0, parse_dates=True)
        df_g = pd.read_csv(output_dir+'/gband.csv', index_col=0, parse_dates=True)
        df_z = pd.read_csv(output_dir+'/zband.csv', index_col=0, parse_dates=True)
        #combine df and save
        df_grz = df_g.join([df_r, df_z])
        filename=output_dir+'/grzband.csv'
        df_grz.to_csv(filename, mode = 'w', header =df_grz.columns)
        #read
        df_grz = pd.read_csv(output_dir+'/grzband.csv', index_col=0, parse_dates=True)
        #df.index.to_julian_date()
    except:
        print('\NOTE: check missing data in {}'.format(output_dir))

if clip is not None:
    df_g = df_g.iloc[clip[0]:-clip[1]]
    df_r = df_r.iloc[clip[0]:-clip[1]]
    df_z = df_z.iloc[clip[0]:-clip[1]]
    try:
        df_grz = df_grz.iloc[clip[0]:-clip[1]]
    except:
        pass

if clip_sigma is not None:
    print('\n-----------------------')
    print('Removing outliers outside +/-sigma={} in each band...'.format(clip_sigma))
    print('-----------------------')
    df_g = df_g[np.abs(df_g-df_g.mean())<=(clip_sigma*df_g.std())]
    n_g = df_g[~(np.abs(df_g-df_g.mean())<=(clip_sigma*df_g.std()))]
    print('removed {} outliers in g-band'.format(len(n_g)))
    df_r = df_r[np.abs(df_r-df_r.mean())<=(clip_sigma*df_r.std())]
    n_r = df_r[~(np.abs(df_r-df_r.mean())<=(clip_sigma*df_r.std()))]
    print('removed {} outliers in r-band'.format(len(n_r)))
    n_z = df_z[~(np.abs(df_z-df_z.mean())<=(clip_sigma*df_z.std()))]
    df_z = df_z[np.abs(df_z-df_z.mean())<=(clip_sigma*df_z.std())]
    print('removed {} outliers in z-band'.format(len(n_z)))
    #check if grz
    try:
        df_grz = df_grz[np.abs(df_grz-df_grz.mean())<=(clip_sigma*df_grz.std())]
    except:
        pass

print('-----------------------')
print('Showing lightcurve')
print('-----------------------\n')

if band == 'g':
    res = df_phot(target=target, ref=ref, df=df_g, normed=normed, showfig=True)
elif band == 'r':
    res = df_phot(target=target, ref=ref, df=df_r, normed=normed, showfig=True)
elif band == 'z':
    res = df_phot(target=target, ref=ref, df=df_z, normed=normed, showfig=True)
elif band== 'all':
    print('Checking all bands...')
else:
    print('ERROR: check missing data in {}'.format(output_dir))

#below are optional
if band=='all':
    if show_raw_lc == True:
        '''
        bug: plot does not show up. error not reported even non-bool input
        e.g. 1 instead of T/F
        '''
        print('-----------------------')
        print('Plotting raw lightcurves of 3 bands')
        print('-----------------------\n')
        res = plot_multicolor(df_grz, star_idx=star)
        #print(res)

    print('-----------------------')
    print('Plotting 3 bands (df_phot)')
    print('-----------------------\n')

    df_grz = df_phot_multicolor(target, ref, df_g, df_r, df_z, normed, showfig=True)
    #df_grz.to_csv('grz_band.csv', mode = 'w', header =df_grz.columns)
    #res1, res2, res3 = df_phot_multicolor2(target, ref, df_g, df_r, df_z, star, normed)
    '''print('-----------------------')
    print('Generating scatter matrix')
    print('-----------------------\n')
    plot_matrix(df_z)'''
    #plot specific parameters
    #plot_params(df_z)



print('-----------------------')
print('          DONE')
print('-----------------------\n')
