#!/usr/bin/env python

import argparse
import pandas as pd
import sys
import os
import numpy as np
import getpass
from moscatel.plot import df_phot, plot_matrix, plot_params, plot_multicolor, df_phot_multicolor, df_phot_multicolor2
from moscatel.utils import *

config=check_config()
output_dir = config[1]
filters = config[2]
centroids = config[3]

parser = argparse.ArgumentParser(description="Do differential photometry by dividing flux of target star by that of the ref star given the star ids (e.g. target=a,ref=b) and show lightcurve",usage='use "%(prog)s --help" for more information', formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--target', help='target star id', type=str, choices=('{}'.format(range(len(centroids))))
parser.add_argument('--ref', help='reference star id', type=str, choices=('{}'.format(range(len(centroids))))
parser.add_argument('--band', help='choose band', type=str, default='all', choices=('{}'.format(filters), 'all'))
#parser.add_argument('--star', help='choose star', type=int, default=None, choices=(0,1,2))
parser.add_argument('--normed', help='normalize lightcurve?', type=bool, default=True, choices=(True, False))
parser.add_argument('--show_raw_lc', help='show raw lightcurve?', type=bool, default=False, choices=(True, False))
parser.add_argument('--clip', help='clip datapoints (leading,trailing)', type=str, default=None)
parser.add_argument('--clip_sigma', help='keep only the ones that are within +- sigma', type=float, default=None)
parser.add_argument('--binning', help='number of minutes per bin', type=int, default=5)

args = parser.parse_args()

target = args.target
ref = args.ref
normed = args.normed
band = args.band
#star = args.star
show_raw_lc = args.show_raw_lc
clip = args.clip
clip_sigma=args.clip_sigma
binning=args.binning

#parse tuple separated by comma
if clip is not None:
    clip = [int(i) for i in clip.split(',')]

##load output of `moscatel` in output/*.csv

if not os.path.exists(output_dir):
    print('\nERROR: check missing output file of `moscatel-phot` in : {}\n'.format(output_dir))
    sys.exit()

if band=='r': #filters[0]
    df_r = utils.load_df(output_dir, band, clip)

elif band =='g':
    df_g = utils.load_df(output_dir, band, clip)

elif band=='z_s':
    df_z_s = utils.load_df(output_dir, band, clip)

elif band=='i': #for muscat2
    df_i = utils.load_df(output_dir, band, clip)

else: #band == 'all'
    print('Checking all bands...')
    try:
        df_r, df_g, df_z_s, df_grz = utils.combine_df(output_dir, clip)
    except:
        print('\NOTE: check missing data in {}'.format(output_dir))

if clip_sigma is not None:
    '''
    bug: won't work if not all df_g, r, z.csv are available
    temporarily skip
    '''
    df_g, df_r, df_z, df_grz=utils.clip_outlier(clip_sigma, target, ref, df_g, df_r, df_z, df_grz)

print('-----------------------')
print('Showing lightcurve')
print('-----------------------\n')

if band == 'g':
    res = df_phot(target=target, ref=ref, df=df_g, bin=binning, normed=normed, showfig=True)
elif band == 'r':
    res = df_phot(target=target, ref=ref, df=df_r, bin=binning, normed=normed, showfig=True)
elif band == 'z':
    res = df_phot(target=target, ref=ref, df=df_z_s, bin=binning, normed=normed, showfig=True)
elif band == 'i':
    res = df_phot(target=target, ref=ref, df=df_i, bin=binning, normed=normed, showfig=True)

elif band== 'all':
    if show_raw_lc == True:
        '''
        bug: plot does not show up. error not reported even non-bool input
        e.g. 1 instead of T/F
        '''
        print('-----------------------')
        print('Plotting raw lightcurves of 3 bands')
        print('-----------------------\n')
        res = plot_multicolor(df_grz, star_idx=star)
        #print(res)

    print('-----------------------')
    print('Plotting 3 bands (df_phot)')
    print('-----------------------\n')

    df_grz = df_phot_multicolor(target, ref, df_g, df_r, df_z, normed, showfig=True)

    #plot lightcurve separately
    #res1, res2, res3 = df_phot_multicolor2(target, ref, df_g, df_r, df_z, star, normed)

    # print('-----------------------')
    # print('Generating scatter matrix')
    # print('-----------------------\n')
    # plot_matrix(df_z)
    # #plot specific parameters
    # plot_params(df_z)

else:
    print('ERROR: check missing data in {}'.format(output_dir))


print('-----------------------')
print('          DONE')
print('-----------------------\n')
